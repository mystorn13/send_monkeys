diff --git a/soft-ap/Makefile b/soft-ap/Makefile
index cd52f001d..edb675fe6 100644
--- a/soft-ap/Makefile
+++ b/soft-ap/Makefile
@@ -54,6 +54,7 @@ DIRS_${AP_PLATFORM} += pcapdump
 endif
 DIRS_${TALISKER} += tpm-test
 DIRS_${BRCM_AP}  += ${BCM} tools
+DIRS_${BRCM_AP}  += send_monkeys
 DIRS_${PALOMINO} += Beceem_sources/Beceem_driver
 DIRS_${ARDMORE}  += P1020
 DIRS_${EIGER}   += eiger
diff --git a/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_proc.c b/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_proc.c
index 84706e557..086182d76 100644
--- a/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_proc.c
+++ b/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_proc.c
@@ -2445,6 +2445,150 @@ static struct file_operations aruba_radio_iot_coex_status_fops = {
 	.llseek      = seq_lseek,
 	.release     = single_release,
 };
+static int
+radio_bg_traffic_show(struct seq_file *m, void *p)
+{
+    struct wlc_info *wlc = (wlc_info_t *) m->private;
+    aruba_wlc_info_t *awlc;
+    int i;
+    char flags[32];
+    unsigned int start_hf_idx; 
+
+    WLC_DOWN_RETURN(wlc);
+
+    WL_LOCK(wlc->wl);
+    awlc = wlc->awlc;
+
+    seq_printf(m, "target_tx_util:%d current_tx_util:%d rx_util:%d chan_util:%d\n",
+               awlc->target_tx_chan_util, wlc->tx_util_ucode, wlc->rx_util_ucode, wlc->channel_util_ucode);
+    seq_printf(m,"gap:%d pktlen:%d sendpkts_cnt_per_time:%d schedule_interval:%d\n",
+               wlc->tx_util_ucode - awlc->target_tx_chan_util, awlc->pktlen, awlc->sendpkts_cnt_per_time, awlc->schedule_interval);
+
+    WL_UNLOCK(wlc->wl);
+    return 0;
+}
+
+static ssize_t
+radio_bg_traffic_write(struct file *file, const char __user *ubuf,
+                 size_t cnt, loff_t *ppos)
+{
+    struct seq_file *m = file->private_data;
+    struct wlc_info *wlc = (wlc_info_t *) m->private;
+    aruba_wlc_info_t *awlc;
+    char val_str[128] = "";
+    int size = cnt, val=0;
+    int i;
+    printk("wzl %s %d val:%d\n", __FUNCTION__, __LINE__, val);
+    WLC_DOWN_RETURN(wlc);
+
+    printk("wzl %s %d val:%d passive:%d\n", __FUNCTION__, __LINE__, val, WL_ALL_PASSIVE_ENAB(wlc->wl));
+    WL_LOCK(wlc->wl);
+    awlc = wlc->awlc;
+
+    if (copy_from_user (val_str, ubuf, size)) {
+        //WL_UNLOCK(wlc->wl);
+        return (-EFAULT);
+    }
+
+    sscanf(val_str, "%d", &val);
+    if (val >=0 && val <= 100) {
+        awlc->target_tx_chan_util = val;
+        if (val) {
+            if (!awlc->kthread) {
+                awlc->kthread = kthread_create(aruba_bg_traffic_thread_func, awlc, "bg_traffic");
+                if (IS_ERR(awlc->kthread)) {
+                    WL_ERROR(("wl%d: failed to create kernel thread\n", WLCWLUNIT(wlc)));
+                   // WL_UNLOCK(wlc->wl);
+                    return (-EFAULT);
+                }
+               // kthread_bind(awlc->kthread, ARUBA_CPU_BINDING(WLCWLUNIT(wlc)));
+                wake_up_process(awlc->kthread);
+            }
+        } else {
+            //awlc->schedule_interval = 200;
+            kthread_stop(awlc->kthread);
+            awlc->kthread = NULL;
+        }
+    } else {
+        printk("%s %d invalid target tx channel utilization:%d\n", __FUNCTION__, __LINE__, val);
+    }
+    
+    WL_UNLOCK(wlc->wl);
+
+    return size ;
+}
+
+
+static ssize_t
+radio_any_frame_write(struct file *file, const char __user *ubuf,
+                 size_t cnt, loff_t *ppos)
+{
+    struct seq_file *m = file->private_data;
+    struct wlc_info *wlc = (wlc_info_t *) m->private;
+    char *val_str = NULL;
+    int size = cnt, val=0;
+    int ret;
+    WLC_DOWN_RETURN(wlc);
+
+    if(size > 1500)
+        size = 1500;
+
+    val_str = kmalloc(size, GFP_KERNEL);
+    if (val_str == NULL) {
+        WL_ERROR(("%s(%d): unable to allocate for key table\n", __func__,__LINE__));
+        WL_UNLOCK(wlc->wl);
+        printk("*****TESTG,val_str alloc error\n");
+        return -ENOMEM;
+    }
+
+    ret = copy_from_user (val_str, ubuf, size);
+    if (ret) {
+        //WL_UNLOCK(wlc->wl);
+        WL_UNLOCK(wlc->wl);
+        printk("*****TESTG,copy_from_user error\n");
+        return (-EFAULT);
+    }
+
+    printk("*****TESTG,ret %d, size %d\n",ret, size);
+    aruba_any_frame_sendpkts(wlc,val_str,size);
+
+    return size ;
+}
+
+static int
+radio_bg_traffic_proc_open(struct inode *inode, struct file *file)
+{
+    return single_open(file, radio_bg_traffic_show, PDE_DATA(inode));
+}
+
+static const struct file_operations radio_bg_traffic_fops = {
+    .owner = THIS_MODULE,
+    .open = radio_bg_traffic_proc_open,
+    .read = seq_read,
+    .write = radio_bg_traffic_write,
+    .llseek = seq_lseek,
+    .release = single_release,
+};
+
+static int
+radio_any_frame_show(struct seq_file *m, void *p)
+{
+    return 0;
+}
+static int
+radio_any_frame_proc_open(struct inode *inode, struct file *file)
+{
+    return single_open(file, radio_any_frame_show, PDE_DATA(inode));
+}
+
+static const struct file_operations radio_any_frame_fops = {
+    .owner = THIS_MODULE,
+    .open = radio_any_frame_proc_open,
+    .read = seq_read,
+    .write = radio_any_frame_write,
+    .llseek = seq_lseek,
+    .release = single_release,
+};
 
 void
 aruba_proc_radio_attach(wlc_info_t *wlc)
@@ -2579,6 +2723,20 @@ aruba_proc_radio_attach(wlc_info_t *wlc)
                __func__, PROC_NET, wlc->wl->dev->name, PROC_IOT_COEX_STATUS);
         return;
     }
+    
+    if (!(dp = PROC_CREATE_DATA(PROC_BG_TRAFFIC_STATS, 0777, awlc->proc,
+                    &radio_bg_traffic_fops, (void *) wlc))) {
+        printk(KERN_ERR "%s: proc file %s%s/%s not created\n",
+               __func__, PROC_NET, wlc->wl->dev->name, PROC_BG_TRAFFIC_STATS);
+        return ;
+    }
+
+    if (!(dp = PROC_CREATE_DATA(PROC_ANY_FRAME, 0777, awlc->proc,
+                    &radio_any_frame_fops, (void *) wlc))) {
+        printk(KERN_ERR "%s: proc file %s%s/%s not created\n",
+               __func__, PROC_NET, wlc->wl->dev->name, PROC_ANY_FRAME);
+        return ;
+    }
 }
 
 void
@@ -2590,6 +2748,8 @@ aruba_proc_radio_detach(wlc_info_t *wlc)
         kfree(key_buf);
         key_buf = NULL;
     }
+    remove_proc_entry(PROC_ANY_FRAME, awlc->proc);
+    remove_proc_entry(PROC_BG_TRAFFIC_STATS, awlc->proc);
     remove_proc_entry(PROC_IOT_COEX_STATUS, awlc->proc);
     remove_proc_entry(PROC_ANT_STATUS_INFO, awlc->proc);
 #if defined(ARUBA_BOARD_LIMITS)
diff --git a/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_proc.h b/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_proc.h
index a8c11ca1a..ecc8098af 100644
--- a/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_proc.h
+++ b/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_proc.h
@@ -24,6 +24,8 @@
 #endif /* ARUBA_BOARD_LIMITS */
 #define PROC_ANT_STATUS_INFO        "antenna_status"
 #define PROC_IOT_COEX_STATUS        "iot_coex_status"
+#define PROC_BG_TRAFFIC_STATS       "bg_traffic"
+#define PROC_ANY_FRAME              "any_frame"
 
 #ifdef __KERNEL__
 #define CHK_PRN(buf, len, size, tmpbuf, tmpsz, fmt, args...) \
diff --git a/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_wlc.c b/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_wlc.c
index fceaa5e3d..abfd1b074 100644
--- a/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_wlc.c
+++ b/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_wlc.c
@@ -6359,8 +6359,10 @@ aruba_periodic_measurements(wlc_info_t *wlc)
 #endif /* WL_FTM */
     uint32                  scan_dur;
     char                    chanspec_str[CHANSPEC_STR_LEN];
+    aruba_wlc_info_t        *awlc = NULL;
 
     phy_id = wlc->pub->unit;
+    awlc = wlc->awlc;
 
     anul_get_rad(phy_id, anul_wids_update_cpu, NULL);
 
@@ -6393,6 +6395,8 @@ aruba_periodic_measurements(wlc_info_t *wlc)
                     wlc->channel_util_ucode, wlc->rx_util_ucode, wlc->tx_util_ucode));
 
         asap_anul_chrdev_tx_to_am(phy_id, (uint8 *)&aa, AA_SIZE, NULL, aa.aa_pkt_datalen, 0);
+        awlc->current_tx_chan_util = wlc->tx_util_ucode;
+        aruba_bg_traffic_adjust_param(wlc);
     }
 
     /* abort current scanning if more than 200ms on current scan process */
@@ -8757,6 +8761,219 @@ void aruba_set_coex_ses_esl(wlc_info_t *wlc, aruba_coex_ses_esl_config_t *config
                 (*start_timer)->timer.expires, (*stop_timer)->timer.expires));
 }
 
+void aruba_bg_traffic_sendpkts_directly(wlc_info_t *wlc)
+{
+    aruba_wlc_info_t *awlc = NULL;
+    struct scb *scb = NULL;
+    struct ether_addr dest = {{0xff,0xff,0xff,0xff,0xff,0xff}};
+    struct ether_addr src;
+    ratespec_t ratesoverride;
+    wlc_bsscfg_t *bsscfg = NULL;
+    void *p = NULL;
+    uint32 length = 0; 
+    uint16 fc = FC_DATA | FC_FROMDS;
+    uint8 *body = NULL;
+    int ret = BCME_OK;
+    uint32 i = 0;
+    uint32 fifo = 0;
+
+    awlc = wlc->awlc;
+    scb = wlc->band->hwrs_scb;
+    length = awlc->pktlen; 
+    WL_LOCK(wlc->wl);
+
+    memcpy(&src, &(wlc->pub->cur_etheraddr), sizeof(struct ether_addr));
+    for (i = 0; i < awlc->sendpkts_cnt_per_time ; i++) {
+        if (NULL == (p = wlc_frame_get_mgmt(wlc, fc, &dest, &src, &src, length, &body)))
+        {
+            WL_ERROR(("Alloc test pkt buff failed\n"));
+            break;
+        }
+
+        memset(body, 0xF0, length);
+        bsscfg = SCB_BSSCFG(scb);
+        ratesoverride = wlc_lowest_basic_rspec(wlc, &bsscfg->current_bss->rateset);
+		
+        PKTSETPRIO(p, MAXPRIO);
+		WLPKTTAGSCBSET(p, scb);
+        WLPKTTAGBSSCFGSET(p, WLC_BSSCFG_IDX(bsscfg));
+        wlc_scb_get_txfifo(wlc, scb, p, &fifo);
+        wlc_d11hdrs(wlc, p, scb, 0, 0, 1, fifo, 0, NULL, NULL, ratesoverride);
+        wlc_bmac_txfifo(wlc->hw, fifo, p, TRUE, INVALIDFID, 1);
+       // aruba_txq_hw_fill(wlc, p, fifo);
+    }
+    WL_UNLOCK(wlc->wl);
+}
+
+void aruba_bg_traffic_sendpkts(wlc_info_t *wlc)
+{
+    aruba_wlc_info_t *awlc = NULL;
+    struct scb *scb = NULL;
+    struct ether_addr dest = {{0xff,0xff,0xff,0xff,0xff,0xff}};
+    struct ether_addr src;
+    ratespec_t ratesoverride;
+    wlc_bsscfg_t *bsscfg = NULL;
+    void *p = NULL;
+    uint32 length = 1500; 
+    uint16 fc = FC_DATA | FC_FROMDS;
+    uint8 *body = NULL;
+    int ret = BCME_OK;
+    uint32 i = 0;
+
+    awlc = wlc->awlc;
+    scb = wlc->band->hwrs_scb;
+    length = awlc->pktlen;
+    
+    WL_LOCK(wlc->wl);
+
+    memcpy(&src, &(wlc->pub->cur_etheraddr), sizeof(struct ether_addr));
+    for (i = 0; i < awlc->sendpkts_cnt_per_time ; i++) {
+        if (NULL == (p = wlc_frame_get_mgmt(wlc, fc, &dest, &src, &src, length, &body)))
+        {
+            WL_ERROR(("Alloc test pkt buff failed\n"));
+            break;
+        }
+
+        memset(body, 0xF0, length);
+        bsscfg = SCB_BSSCFG(scb);
+        ratesoverride = wlc_lowest_basic_rspec(wlc, &bsscfg->current_bss->rateset);
+        
+        wlc_queue_80211_frag(wlc, p, SCB_WLCIFP(scb)->qi, scb, bsscfg, FALSE, NULL, ratesoverride);
+    }
+    WL_UNLOCK(wlc->wl);
+}
+
+
+void aruba_any_frame_sendpkts(wlc_info_t *wlc, char * buf, int size)
+{
+    aruba_wlc_info_t *awlc = NULL;
+    struct scb *scb = NULL;
+    struct ether_addr dest = {{0xff,0xff,0xff,0xff,0xff,0xff}};
+    struct ether_addr src;
+    ratespec_t ratesoverride;
+    wlc_bsscfg_t *bsscfg = NULL;
+    void *p = NULL;
+    uint32 length = 1500; 
+    uint8 *body = NULL;
+    int ret = BCME_OK;
+    uint32 i = 0;
+
+    awlc = wlc->awlc;
+    scb = wlc->band->hwrs_scb;
+    length = awlc->pktlen;
+    
+    WL_LOCK(wlc->wl);
+
+    {
+    	p = PKTGET(wlc->osh, wlc->txhroff + size, TRUE);
+    	if (p == NULL) {
+        	WL_ERROR(("wl%d: %s: Out of memory allocating IGMP Query packet\n",
+            	wlc->pub->unit, __FUNCTION__));
+        	return;
+    	}
+
+		PKTPULL(wlc->osh, p, wlc->txhroff);
+
+    	body = (char *)PKTDATA(wlc->osh, p);
+
+        memcpy(body, buf, size);
+        bsscfg = SCB_BSSCFG(scb);
+        ratesoverride = wlc_lowest_basic_rspec(wlc, &bsscfg->current_bss->rateset);
+        
+        wlc_queue_80211_frag(wlc, p, SCB_WLCIFP(scb)->qi, scb, bsscfg, FALSE, NULL, ratesoverride);
+    }
+    WL_UNLOCK(wlc->wl);
+}
+
+void delay_ms(int ms)
+{
+    unsigned long timeout = msecs_to_jiffies(ms) + 1;
+    set_current_state(TASK_INTERRUPTIBLE);
+    schedule_timeout(timeout);
+}
+int aruba_bg_traffic_thread_func(void *data)
+{
+	aruba_wlc_info_t *awlc = (aruba_wlc_info_t *) data;
+
+	while (!kthread_should_stop())
+	{
+	//	wait_event_interruptible(wl->kthread_wqh,
+	//		(wl->txq_dispatched || kthread_should_stop()));
+		if (kthread_should_stop())
+		{
+			printk(KERN_INFO "kthread_should_stop detected\n");
+			break;
+		}
+        set_current_state(TASK_UNINTERRUPTIBLE);
+        //delay_ms(awlc->schedule_interval);
+        //msleep_interruptible(awlc->schedule_interval);
+        msleep(awlc->schedule_interval);
+        aruba_bg_traffic_sendpkts(awlc->wlc);
+
+	}
+	return 0;
+}
+#define ARUBA_BG_TRAFFIC_MAX_PKTLEN (1500)
+#define ARUBA_BG_TRAFFIC_MIN_PKTLEN (10)
+#define ARUBA_BG_TRAFFIC_STEP_LEN (10)
+#define ARUBA_BG_TRAFFIC_MAX_SCHEDULE_INTERVAL (5)
+#define ARUBA_BG_TRAFFIC_MIN_SCHEDULE_INTERVAL (1)
+#define ARUBA_BG_TRAFFIC_MAX_PKTCNT (5)
+#define ARUBA_BG_TRAFFIC_MIN_PKTCNT (1)
+void aruba_bg_traffic_adjust_param(wlc_info_t *wlc)
+{
+    aruba_wlc_info_t *awlc = NULL;
+    int gap = 0;
+
+    awlc = wlc->awlc;
+    
+    gap = wlc->tx_util_ucode - awlc->target_tx_chan_util;
+
+    if (gap == 0) {
+
+        return;
+    }
+
+    if (gap > 0) {
+        if (awlc->pktlen > ARUBA_BG_TRAFFIC_MIN_PKTLEN) {
+            if (awlc->pktlen >= ARUBA_BG_TRAFFIC_MIN_PKTLEN + ARUBA_BG_TRAFFIC_STEP_LEN) {
+                awlc->pktlen -= ARUBA_BG_TRAFFIC_STEP_LEN;
+                return;
+            }
+        }
+        if (awlc->sendpkts_cnt_per_time > ARUBA_BG_TRAFFIC_MIN_PKTCNT) {
+            awlc->sendpkts_cnt_per_time--;
+            return;
+        }
+        if (awlc->schedule_interval < ARUBA_BG_TRAFFIC_MAX_SCHEDULE_INTERVAL) {
+            awlc->schedule_interval++;
+            return;
+        }
+    }
+
+    if (gap < 0) {
+        if (awlc->pktlen < ARUBA_BG_TRAFFIC_MAX_PKTLEN) {
+            if (awlc->pktlen + ARUBA_BG_TRAFFIC_STEP_LEN <= ARUBA_BG_TRAFFIC_MAX_PKTLEN) {
+                awlc->pktlen += ARUBA_BG_TRAFFIC_STEP_LEN;
+                return;
+            }
+        }
+        if (awlc->sendpkts_cnt_per_time < ARUBA_BG_TRAFFIC_MAX_PKTCNT) {
+            awlc->sendpkts_cnt_per_time++;
+            return;
+        }
+        if (awlc->schedule_interval > ARUBA_BG_TRAFFIC_MIN_SCHEDULE_INTERVAL) {
+            awlc->schedule_interval--;
+            return;
+        }
+
+        }
+    
+    printk("wzl %s %d gap:%d pktlen:%d sendpkts_cnt_per_time:%d schedule_interval:%d\n", __FUNCTION__, __LINE__,
+            gap, awlc->pktlen, awlc->sendpkts_cnt_per_time, awlc->schedule_interval);
+}
+
+
 /* module */
 aruba_wlc_info_t *
 BCMATTACHFN(wlc_aruba_attach)(wlc_info_t *wlc)
@@ -8930,7 +9147,10 @@ BCMATTACHFN(wlc_aruba_attach)(wlc_info_t *wlc)
         goto fail;
     }
     PKTSETLEN(wlc->osh, awlc->upr_fd_pkt_tmpl, wlc->pub->bcn_tmpl_len);
-
+    awlc->pktlen = 10;
+    awlc->sendpkts_cnt_per_time = 1;
+    awlc->schedule_interval = 1;
+    awlc->kthread = NULL;
     return awlc;
 
 fail:
@@ -8998,6 +9218,10 @@ BCMATTACHFN(wlc_aruba_detach)(aruba_wlc_info_t *awlc)
         PKTFREE(wlc->osh, awlc->upr_fd_pkt_tmpl, TRUE);
         awlc->upr_fd_pkt_tmpl = NULL;
     }
+    if (awlc->kthread) {
+        kthread_stop(awlc->kthread);
+        awlc->kthread = NULL;
+    }
 
     MFREE(wlc->osh, awlc, sizeof(aruba_wlc_info_t));
 
diff --git a/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_wlc.h b/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_wlc.h
index 69b6d24aa..6eb0a374b 100644
--- a/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_wlc.h
+++ b/soft-ap/broadcom/esdk6e/main/src/wl/sys/aruba/aruba_wlc.h
@@ -1076,6 +1076,17 @@ struct aruba_wlc_info {
     bool update_mbssid_config;
     bool                     filter_5g_state_commit; /* Force commit in aruba_commit_radio_wq() */
     void *upr_fd_pkt_tmpl;
+
+    uint8_t target_tx_chan_util;
+    uint8_t current_tx_chan_util;
+    uint32_t bg_traffic_in_flight_cnt;
+    uint8_t schedule_interval;
+    uint32_t sendpkts_cnt_per_time;
+    uint32_t pktlen; 
+	
+    struct task_struct	*kthread;
+	wait_queue_head_t	kthread_wqh;
+    
 };
 
 struct aruba_wl_stats {
@@ -1521,4 +1532,9 @@ uint8 aruba_get_pow_mode(wlc_info_t *wlc);
 uint8 aruba_get_pow_mode_chanspec(wlc_info_t *wlc, chanspec_t chanspec);
 void aruba_set_default_dynamic_fb_mode(wlc_info_t *wlc);
 int is_imminent_vap_down_set(wlc_info_t *wlc, wlc_bsscfg_t *bsscfg);
+
+extern int aruba_bg_traffic_thread_func(void *data);
+extern void aruba_bg_traffic_adjust_param(wlc_info_t *wlc);
+extern void aruba_any_frame_sendpkts(wlc_info_t *wlc, char * buf, int size);
+
 #endif /* _ARUBA_WLC_H */
diff --git a/soft-ap/broadcom/esdk6e/main/src/wl/sys/wlc_tx.c b/soft-ap/broadcom/esdk6e/main/src/wl/sys/wlc_tx.c
index 6a5df4008..69a6e95c5 100644
--- a/soft-ap/broadcom/esdk6e/main/src/wl/sys/wlc_tx.c
+++ b/soft-ap/broadcom/esdk6e/main/src/wl/sys/wlc_tx.c
@@ -1201,7 +1201,7 @@ txq_hw_fill(txq_info_t *txqi, txq_t *txq, uint fifo_idx)
 #if defined(ARUBA_MODS)
 		/* Bug 178196, bsscfg can be null in which case we also drop pkt */
 		/* AOS-230186, scb can be null as well */
-		if (wlc->awlc->no_transmit || bsscfg == NULL || scb == NULL) {
+		if (wlc->awlc->no_transmit || bsscfg == NULL || scb == NULL/* || wlc->awlc->target_tx_chan_util*/) {
 #else
 		if (bsscfg == NULL) {
 #endif
